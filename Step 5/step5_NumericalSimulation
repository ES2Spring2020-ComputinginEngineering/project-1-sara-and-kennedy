#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 31 21:27:02 2020

@author: kennedymay
"""

# Names: Kennedy May and Sara Morrison

#Import Statements
import numpy as np
import matplotlib.pyplot as plt
from numpy import cos
from scipy.signal import find_peaks

#Global Variables
lengths = np.array([.53, .43, .33, .23, .13]) #creates an array of pendulum lengths in meters
time = np.linspace(0, 10, 200) #times between 0 and 10 with a time step of 0.05 seconds
g = -9.81

#Custom Funtions
def pendulum(length, angle1): 
    #function that takes two arguments:length of pendulum and starting angle 
    #It uses these inputs in equations to find angular position, angular velocity, and angular acceleration
    #It then creates plots of Time vs Angluar Position, Time vs Angular Velocity, and Time vs Angular Acceleration
    
    angle_radians = np.radians(angle1)
    angular_frequency = np.sqrt(-g/length)
    angle = [angle_radians * cos(angular_frequency * i) for i in time]
    angular_velocity = [-angular_frequency * angle_radians * cos(angular_frequency * i) for i in time]
    angular_acceleration = [-angle_radians * angular_frequency ** 2 * cos(angular_frequency * i) for i in time]
    
    plt.subplot(2, 2, 1)
    plt.title("Time vs Angle for Length" + " " + str(length))
    plt.xlabel("Time (seconds)")
    plt.ylabel("Angle (radians)")
    plt.plot(time, angle)    #plots Time vs Angular Position
    
    plt.subplot(2, 2, 2)
    plt.title("Time vs Velocity for Length" + " " + str(length))
    plt.xlabel("Time (seconds)")
    plt.ylabel("Velocity (radians/s)")
    plt.plot(time, angular_velocity)   #plots Time vs Angular Velocity
    
    plt.subplot(2, 2, 3)
    plt.title("Time vs Acceleration, Length:" + " " + str(length))
    plt.xlabel("Time (seconds)")
    plt.ylabel("Acceleration (radians/s/s)")
    plt.plot(time, angular_acceleration)    #plots Time vs Angular Acceleration
    plt.tight_layout()
    plt.show
 

def period(length, angle1):
    #this is a function that takes two parameters, length and initial angle
    #it returns an array containing the timesteps at which the peaks occur
    #the period is the distance between the timesteps multiplied by 0.05
    angle_radians = np.radians(angle1)
    angular_frequency = np.sqrt(-g/length)
    angle = [angle_radians * cos(angular_frequency * i) for i in time]
    peaks = find_peaks(angle)
    return peaks

def physics_period(length):
    #this is a function that takes the parameter length and returns the period
    period = [2 * np.pi *np.sqrt(length / g))
    return period
