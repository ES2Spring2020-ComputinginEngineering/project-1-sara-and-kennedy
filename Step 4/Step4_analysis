#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 31 21:30:13 2020

@author: kennedymay
"""

"""Step 4 Theoretical Model Code
Name: Kennedy May and Sara Morrison
"""

#IMPORT STATEMENTS
import numpy as np 
import matplotlib.pyplot as plt
import scipy.signal as sig
import os


path = '/Users/kennedymay/mu_code/data_capture'
os.chdir(path)


#VARIABLES
array1 = np.loadtxt('1_piece.csv', delimiter=',' , dtype=int)
array2 = np.loadtxt('2_pieces.csv', delimiter=',',  dtype=int)
array3 = np.loadtxt('3_pieces.csv', delimiter=',' , dtype=int)
array4 = np.loadtxt('4_pieces.csv', delimiter=',',  dtype=int)
array5 = np.loadtxt('5_pieces.csv', delimiter=',' , dtype=int)

length = np.array([.13, .23, .33, .43, .53])


#CUSTOM FUNCTIONS
'''This function takes an array parameter and a length paramater 
it then splits the array to have 4 different arrays, one for each
direction of acceleration. The accelerations vs. time are then plotted'''
def acceleration_Time(array, l):
    time = array[90:300, 0]
    x_acc = array[90:300, 1]
    y_acc = array[90:300, 2]
    z_acc = array[90:300, 3]
    
    figs, axs = plt.subplots(3,1)
    axs[0].plot(time, x_acc)
    axs[1].plot(time, y_acc)
    axs[2].plot(time, z_acc)
    
    axs[0].set_ylabel('Acceleration (m/ms^2)')
    
    axs[1].set_ylabel('Acceleration (m/ms^2)')
    
    axs[2].set_ylabel('Acceleration (m/ms^2)')
    axs[2].set_xlabel('Time (ms)')
    
    figs.suptitle('Acceleration vs. Time ' + str(l) + ' Meters')
    
    return plt.show()


'''This function takes an array parameter and find the angle in the
y direction and returns that value'''
def find_tilt_y(array):
    z_acc = array[90:300, 3]
    y_acc = array[90:300, 2]
    x_acc = array[90:300, 1]
    z = (z_acc**2)
    x = (x_acc**2)
    tilty = (np.arctan2(y_acc, (np.sqrt(z+x))))*(180/np.pi)
    return tilty

'''
This function takes an array parameter and takes a length
and returns a plot showing the thetas'''
def theta_vs_time(array, l):
    time = array[90:300, 0]
    array = sig.medfilt(array)
    theta = find_tilt_y(array)
    plt.plot(time, theta)
    
    plt.xlabel('Time (ms)')
    plt.ylabel('Theta (degrees)')
    plt.title('Time vs. Theta ' + str(l) + ' Meters')
    
    return plt.show()


'''
This function takes one array parameter, and then finds the average
period and returns this value
'''
def findperiod(array):
    x = array[100:250, 1]
    oringaltime = array[100:250, 0]
    x_filt = sig.medfilt(x)
    peaks, _ = sig.find_peaks(x_filt)
    
    time = oringaltime[peaks]
    finalperiod = []
    
    for i in range(len(time)-2):
        period = time[i+1]- time[i]
        finalperiod += [period]
        
        averageperiod = np.average(finalperiod)
    
    return (averageperiod/1000)


'''
This function takes no parameters, but it plots
all the average periods and the lengths of each'''
def allperiods():
    a = findperiod(array1)
    b = findperiod(array2)
    c = findperiod(array3)
    d =findperiod(array4)
    e = findperiod(array5)

    periods = [a,b,c,d,e]
    length = [.13, .23, .33, .43, .53]

    plt.plot(length, periods)

    plt.title('Length vs. Period')
    plt.ylabel('Period Values (s)')
    plt.xlabel('Length (m)')
    plt.show()


def main():
    acceleration_Time(array1, .13)
    acceleration_Time(array2, .23)
    acceleration_Time(array3, .33)
    acceleration_Time(array4, .43)
    acceleration_Time(array5, .53)


    theta_vs_time(array1, .13)
    theta_vs_time(array2, .23)
    theta_vs_time(array3, .33)
    theta_vs_time(array4, .43)
    theta_vs_time(array5, .55)

    allperiods()


main()